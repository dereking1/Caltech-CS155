{"cells":[{"cell_type":"code","execution_count":20,"metadata":{"executionInfo":{"elapsed":8,"status":"ok","timestamp":1644259730444,"user":{"displayName":"Daniel Li","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggjew1qulbYpvRAPAcuB8Gul50XXi3L5docheqby84=s64","userId":"08785792224213041818"},"user_tz":480},"id":"NKcK87FSsZgr"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# logistic regression\n","from sklearn.linear_model import LogisticRegression\n","\n","# decision tree ;)\n","from sklearn.tree import DecisionTreeRegressor, DecisionTreeClassifier\n","\n","# random forest\n","from sklearn.ensemble import RandomForestRegressor\n","from sklearn.datasets import make_regression\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.ensemble import AdaBoostRegressor\n","\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.datasets import make_classification\n","from sklearn.ensemble import GradientBoostingClassifier\n","from sklearn.ensemble import AdaBoostClassifier\n","\n","from sklearn.model_selection import KFold\n","from sklearn.model_selection import train_test_split\n","\n","from sklearn.metrics import roc_auc_score\n","\n","import xgboost as xgb"]},{"cell_type":"code","execution_count":21,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1644259730619,"user":{"displayName":"Daniel Li","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggjew1qulbYpvRAPAcuB8Gul50XXi3L5docheqby84=s64","userId":"08785792224213041818"},"user_tz":480},"id":"DTvVz5WRsd7M"},"outputs":[],"source":["# ! pip install kaggle\n","# ! mkdir ~/.kaggle\n","# ! cp kaggle.json ~/.kaggle/\n","# ! chmod 600 ~/.kaggle/kaggle.json\n","# ! kaggle competitions download -c caltech-cs155-2022-mp1\n","# ! unzip LOANS_TRAIN.csv.zip\n","# ! unzip LOANS_TEST.csv.zip"]},{"cell_type":"code","execution_count":22,"metadata":{"executionInfo":{"elapsed":224,"status":"ok","timestamp":1644259731579,"user":{"displayName":"Daniel Li","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggjew1qulbYpvRAPAcuB8Gul50XXi3L5docheqby84=s64","userId":"08785792224213041818"},"user_tz":480},"id":"7cf6hW9lszm0"},"outputs":[],"source":["# PROCESSING TRAINING DATA SET\n","\n","def float_percent(x):\n","    return float(x.strip('%'))/100\n","\n","def int_emplength(x):\n","    if x == '\u003c 1 year' or x == 0:\n","        return 0\n","    nums = []\n","    for c in x:\n","        if c.isdigit():\n","            nums.append(c)\n","    num = ''.join(nums)\n","    if num == '':\n","        return 0\n","    return int(num)\n","\n","# Ordinal with A = 7, G = 1 (Assumption A = best)\n","def convert_grade_to_numeric(grade):\n","  return 7 - int(ord(grade) - ord('A'))\n","\n","# Ordinal with A = 7, G = 1 (Assumption A1 = best)\n","def convert_subgrade_to_numeric(grade):\n","  tier = convert_grade_to_numeric(grade[0])\n","  number = int(grade[1])\n","  return (tier * 5) - number + 1\n","\n","def one_hot_encode_home_ownership(X):\n","  home_ownership_rent = []\n","  home_ownership_mortgage = []\n","  home_ownership_own = []\n","  for i in range(len(X)):\n","    if X[i][8] == 'RENT':\n","      home_ownership_rent.append(1)\n","      home_ownership_mortgage.append(0)\n","      home_ownership_own.append(0)\n","    elif X[i][8] == 'MORTGAGE':\n","      home_ownership_rent.append(0)\n","      home_ownership_mortgage.append(1)\n","      home_ownership_own.append(0)\n","    elif X[i][8] == 'OWN':\n","      home_ownership_rent.append(0)\n","      home_ownership_mortgage.append(0)\n","      home_ownership_own.append(1)\n","    else:\n","      home_ownership_rent.append(0)\n","      home_ownership_mortgage.append(0)\n","      home_ownership_own.append(0)\n","\n","\n","  return home_ownership_rent, home_ownership_mortgage, home_ownership_own\n","\n","def one_hot_encode_verification_status(X):\n","  verification_status_verified = []\n","  verification_status_source = []\n","  verification_status_not_verified = []\n","  for i in range(len(X)):\n","    if X[i][10] == 'Verified':\n","      verification_status_verified.append(1)\n","      verification_status_source.append(0)\n","      verification_status_not_verified.append(0)\n","    elif X[i][10] == 'Source Verified':\n","      verification_status_verified.append(0)\n","      verification_status_source.append(1)\n","      verification_status_not_verified.append(0)\n","    elif X[i][10] == 'Not Verified':\n","      verification_status_verified.append(0)\n","      verification_status_source.append(0)\n","      verification_status_not_verified.append(1)\n","\n","  return verification_status_verified, verification_status_source, verification_status_not_verified\n","\n","\n","def one_hot_encode_initial_list_status(X):\n","  f = []\n","  w = []\n","  for i in range(len(X)):\n","    if X[i][23] == 'f':\n","      f.append(1)\n","      w.append(0)\n","    elif X[i][23] == 'w':\n","      f.append(0)\n","      w.append(1)\n","  return f, w"]},{"cell_type":"code","execution_count":23,"metadata":{"executionInfo":{"elapsed":324,"status":"ok","timestamp":1644259731901,"user":{"displayName":"Daniel Li","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggjew1qulbYpvRAPAcuB8Gul50XXi3L5docheqby84=s64","userId":"08785792224213041818"},"user_tz":480},"id":"lOfP0qSZs4_0"},"outputs":[],"source":["def process(X, boolean):\n","  loan_amount = []\n","  term = []\n","  int_rate = []\n","  installment = []\n","  grade = []\n","  subgrade = []\n","  emp_len = []\n","  annual_inc = []\n","  purpose = []\n","  dti = []\n","  open_acc = []\n","  pub_rec = []\n","  revol_bal = []\n","  revol_util = []\n","  total_acc = []\n","  pub_rec_bank = []\n","  loan_status = []\n","\n","  home_ownership_rent, home_ownership_mortgage, home_ownership_own = one_hot_encode_home_ownership(X)\n","  verification_status_verified, verification_status_source, verification_status_not_verified = one_hot_encode_verification_status(X)\n","  initial_status_f, initial_status_w = one_hot_encode_initial_list_status(X)\n","\n","\n","  for i in range(len(X)):\n","    loan_amount.append(X[i][0])\n","    term.append(X[i][1])\n","    int_rate.append(float_percent(str(X[i][2])))\n","    installment.append(X[i][3])\n","    grade.append(convert_grade_to_numeric(X[i][4]))\n","    subgrade.append(convert_subgrade_to_numeric(X[i][5]))\n","    emp_len.append(int_emplength(X[i][7]))\n","    annual_inc.append(X[i][9])\n","    dti.append(X[i][16])\n","    open_acc.append(X[i][18])\n","    pub_rec.append(X[i][19])\n","    revol_bal.append(X[i][20])\n","    revol_util.append(float_percent(str(X[i][21])))\n","    total_acc.append(X[i][22])\n","    pub_rec_bank.append(X[i][26])\n","\n","  data = {'loan_amnt': loan_amount, \n","        'term (months)': term,\n","        'int_rate': int_rate,\n","        'installment': installment,\n","        'grade': grade,\n","        'subgrade': subgrade,\n","        'emp_length': emp_len,\n","        'home_ownership_rent': home_ownership_rent,\n","        'home_ownership_mortgage': home_ownership_mortgage,\n","        'home_ownership_own': home_ownership_own,\n","        'annual_inc': annual_inc,\n","        'verification_status_verified': verification_status_verified, \n","        'verification_status_source': verification_status_source, \n","        'verification_status_not_verified': verification_status_not_verified,\n","        'dti': dti,\n","        'open_acc': open_acc,\n","        'pub_rec': pub_rec,\n","        'revol_bal': revol_bal,\n","        'revol_util': revol_util,\n","        'pub_rec_bank': pub_rec_bank,\n","      }\n","\n","  if boolean:\n","    loan_status = [0 if X[i,-1] == 'Fully Paid' else 1 for i in range(X.shape[0])]\n","    data['loan_status'] = loan_status\n","\n","  # Good dataframe\n","  # Sorry didnt generalize for X_test \n","  df = pd.DataFrame(data=data)\n","  return df"]},{"cell_type":"code","execution_count":24,"metadata":{"executionInfo":{"elapsed":3,"status":"ok","timestamp":1644259732046,"user":{"displayName":"Daniel Li","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggjew1qulbYpvRAPAcuB8Gul50XXi3L5docheqby84=s64","userId":"08785792224213041818"},"user_tz":480},"id":"w7XwLXX7tASm"},"outputs":[],"source":["def normalize(train, test):\n","\n","  X_std = np.std(train, axis=0)\n","  X_mean = np.mean(train, axis=0)\n","\n","  for k in range(len(train[0])):\n","      train[:,k] = (train[:,k] - X_mean[k]) / X_std[k]\n","      test[:,k] = (test[:,k] - X_mean[k]) / X_std[k]\n","\n","  return train, test"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6053,"status":"ok","timestamp":1644259738643,"user":{"displayName":"Daniel Li","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggjew1qulbYpvRAPAcuB8Gul50XXi3L5docheqby84=s64","userId":"08785792224213041818"},"user_tz":480},"id":"8sbFBJVAtDP4","outputId":"f19a393d-c6fa-45b8-ea99-d28a0ceb648d"},"outputs":[{"name":"stdout","output_type":"stream","text":["197250\n","42480\n"]}],"source":["train_df = pd.read_csv('/content/LOANS_TRAIN.csv')\n","# train_df = train_df.dropna(subset=['emp_length'])\n","train_data = train_df.fillna(0)\n","train = process(train_data.to_numpy()[:,1:], True)\n","full_train_data = train.to_numpy()\n","print(len(train_df))\n","\n","test_df = pd.read_csv('/content/LOANS_TEST.csv')\n","# test_df = test_df.dropna(subset=['emp_length'])\n","test_data = test_df.fillna(0)\n","test = process(test_data.to_numpy()[:,1:], False)\n","test_data = test.to_numpy()\n","print(len(test_df))\n","\n","X_train = full_train_data[:,:-1]\n","Y_train = full_train_data[:,-1]\n","X_test = test_data\n","X_train, X_test = normalize(X_train, X_test)"]},{"cell_type":"code","execution_count":28,"metadata":{"executionInfo":{"elapsed":172,"status":"ok","timestamp":1644265121628,"user":{"displayName":"Daniel Li","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggjew1qulbYpvRAPAcuB8Gul50XXi3L5docheqby84=s64","userId":"08785792224213041818"},"user_tz":480},"id":"v3GJMSJ_tGO1"},"outputs":[],"source":["# # XGBoost on Otto dataset, Tune n_estimators\n","# # CHECK N_ESTIMATORS\n","from pandas import read_csv\n","from xgboost import XGBClassifier\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.preprocessing import LabelEncoder\n","import matplotlib\n","matplotlib.use('Agg')\n","from matplotlib import pyplot\n","\n","# # encode string class values as integers\n","# label_encoded_y = LabelEncoder().fit_transform(Y_train)\n","# # grid search\n","\n","# model = XGBClassifier()\n","# n_estimators = range(400, 650, 50)\n","# param_grid = dict(n_estimators=n_estimators)\n","# kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=7)\n","# grid_search = GridSearchCV(model, param_grid, scoring=\"neg_log_loss\", n_jobs=-1, cv=kfold)\n","# grid_result = grid_search.fit(X_train, label_encoded_y)\n","# # summarize results\n","\n","# print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","# means = grid_result.cv_results_['mean_test_score']\n","# stds = grid_result.cv_results_['std_test_score']\n","# params = grid_result.cv_results_['params']\n","# for mean, stdev, param in zip(means, stds, params):\n","# \tprint(\"%f (%f) with: %r\" % (mean, stdev, param))\n","# # plot\n","# pyplot.errorbar(n_estimators, means, yerr=stds)\n","# pyplot.title(\"XGBoost n_estimators vs Log Loss\")\n","# pyplot.xlabel('n_estimators')\n","# pyplot.ylabel('Log Loss')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"q4mbfrFpub1e"},"outputs":[{"name":"stdout","output_type":"stream","text":["[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n","Fitting 10 folds for each of 25 candidates, totalling 250 fits\n"]}],"source":["# encode string class values as integers\n","# CHECK MAX DEPTH\n","label_encoded_y = LabelEncoder().fit_transform(Y_train)\n","# grid search\n","model = XGBClassifier()\n","max_depth = [i for i in range(25)]\n","print(max_depth)\n","param_grid = dict(max_depth=max_depth)\n","kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=7)\n","grid_search = GridSearchCV(model, param_grid, scoring=\"neg_log_loss\", n_jobs=-1, cv=kfold, verbose=1)\n","grid_result = grid_search.fit(X_train, label_encoded_y)\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","\tprint(\"%f (%f) with: %r\" % (mean, stdev, param))"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":20,"status":"aborted","timestamp":1644265113254,"user":{"displayName":"Daniel Li","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggjew1qulbYpvRAPAcuB8Gul50XXi3L5docheqby84=s64","userId":"08785792224213041818"},"user_tz":480},"id":"67DdD_eJlkV7"},"outputs":[],"source":["# encode string class values as integers\n","# CHECK MIN_CHILD_WEIGHT\n","label_encoded_y = LabelEncoder().fit_transform(Y_train)\n","# grid search\n","model = XGBClassifier()\n","min_child_weight = [i for i in range(25)]\n","print(min_child_weight)\n","param_grid = dict(min_child_weight=min_child_weight)\n","kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=7)\n","grid_search = GridSearchCV(model, param_grid, scoring=\"neg_log_loss\", n_jobs=-1, cv=kfold, verbose=1)\n","grid_result = grid_search.fit(X_train, label_encoded_y)\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","\tprint(\"%f (%f) with: %r\" % (mean, stdev, param))"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":22,"status":"aborted","timestamp":1644265113256,"user":{"displayName":"Daniel Li","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggjew1qulbYpvRAPAcuB8Gul50XXi3L5docheqby84=s64","userId":"08785792224213041818"},"user_tz":480},"id":"waq474w1yi7m"},"outputs":[],"source":["# encode string class values as integers\n","# CHECK N_THREAD\n","label_encoded_y = LabelEncoder().fit_transform(Y_train)\n","# grid search\n","model = XGBClassifier()\n","n_thread = [i for i in range(5,100,5)]\n","print(n_thread)\n","param_grid = dict(n_thread=n_thread)\n","kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=7)\n","grid_search = GridSearchCV(model, param_grid, scoring=\"neg_log_loss\", n_jobs=-1, cv=kfold, verbose=1)\n","grid_result = grid_search.fit(X_train, label_encoded_y)\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","\tprint(\"%f (%f) with: %r\" % (mean, stdev, param))"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":23,"status":"aborted","timestamp":1644265113257,"user":{"displayName":"Daniel Li","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ggjew1qulbYpvRAPAcuB8Gul50XXi3L5docheqby84=s64","userId":"08785792224213041818"},"user_tz":480},"id":"nxy7EeMVzAZU"},"outputs":[],"source":["# encode string class values as integers\n","# CHECK ETA\n","label_encoded_y = LabelEncoder().fit_transform(Y_train)\n","# grid search\n","model = XGBClassifier()\n","eta = [i*0.1 for i in range(1,6)]\n","print(eta)\n","param_grid = dict(eta=eta)\n","kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=7)\n","grid_search = GridSearchCV(model, param_grid, scoring=\"neg_log_loss\", n_jobs=-1, cv=kfold, verbose=1)\n","grid_result = grid_search.fit(X_train, label_encoded_y)\n","# summarize results\n","print(\"Best: %f using %s\" % (grid_result.best_score_, grid_result.best_params_))\n","means = grid_result.cv_results_['mean_test_score']\n","stds = grid_result.cv_results_['std_test_score']\n","params = grid_result.cv_results_['params']\n","for mean, stdev, param in zip(means, stds, params):\n","\tprint(\"%f (%f) with: %r\" % (mean, stdev, param))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LMmBOSNczMim"},"outputs":[],"source":[""]}],"metadata":{"colab":{"authorship_tag":"ABX9TyNMhcYU0jZ2mBIWDC9KwtSe","collapsed_sections":[],"name":"xgboost","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}